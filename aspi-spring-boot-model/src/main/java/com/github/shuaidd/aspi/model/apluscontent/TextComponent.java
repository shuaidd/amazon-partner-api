/*
 * Selling Partner API for A+ Content Management
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.shuaidd.aspi.model.apluscontent;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;

/**
 * Rich text content.
 */

public class TextComponent {
  @SerializedName("value")
  private String value = null;

  @SerializedName("decoratorSet")
  private DecoratorSet decoratorSet = null;

  public TextComponent value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The actual plain text.
   * @return value
  **/

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public TextComponent decoratorSet(DecoratorSet decoratorSet) {
    this.decoratorSet = decoratorSet;
    return this;
  }

   /**
   * Get decoratorSet
   * @return decoratorSet
  **/

  public DecoratorSet getDecoratorSet() {
    return decoratorSet;
  }

  public void setDecoratorSet(DecoratorSet decoratorSet) {
    this.decoratorSet = decoratorSet;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextComponent textComponent = (TextComponent) o;
    return Objects.equals(this.value, textComponent.value) &&
        Objects.equals(this.decoratorSet, textComponent.decoratorSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, decoratorSet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextComponent {\n");

    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    decoratorSet: ").append(toIndentedString(decoratorSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

