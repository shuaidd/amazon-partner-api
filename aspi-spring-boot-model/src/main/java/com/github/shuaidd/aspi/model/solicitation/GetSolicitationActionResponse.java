/*
 * Selling Partner API for Solicitations
 * With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.shuaidd.aspi.model.solicitation;

import com.google.gson.annotations.SerializedName;
import com.github.shuaidd.aspi.model.common.ErrorList;

import java.util.Objects;

/**
 * Describes a solicitation action that can be taken for an order. Provides a JSON Hypertext Application Language (HAL) link to the JSON schema document that describes the expected input.
 */

public class GetSolicitationActionResponse {
  @SerializedName("_links")
  private GetSolicitationActionResponseLinks links = null;

  @SerializedName("_embedded")
  private GetSolicitationActionResponseEmbedded embedded = null;

  @SerializedName("payload")
  private SolicitationsAction payload = null;

  @SerializedName("errors")
  private ErrorList errors = null;

  public GetSolicitationActionResponse links(GetSolicitationActionResponseLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/

  public GetSolicitationActionResponseLinks getLinks() {
    return links;
  }

  public void setLinks(GetSolicitationActionResponseLinks links) {
    this.links = links;
  }

  public GetSolicitationActionResponse embedded(GetSolicitationActionResponseEmbedded embedded) {
    this.embedded = embedded;
    return this;
  }

   /**
   * Get embedded
   * @return embedded
  **/

  public GetSolicitationActionResponseEmbedded getEmbedded() {
    return embedded;
  }

  public void setEmbedded(GetSolicitationActionResponseEmbedded embedded) {
    this.embedded = embedded;
  }

  public GetSolicitationActionResponse payload(SolicitationsAction payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/

  public SolicitationsAction getPayload() {
    return payload;
  }

  public void setPayload(SolicitationsAction payload) {
    this.payload = payload;
  }

  public GetSolicitationActionResponse errors(ErrorList errors) {
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/

  public ErrorList getErrors() {
    return errors;
  }

  public void setErrors(ErrorList errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSolicitationActionResponse getSolicitationActionResponse = (GetSolicitationActionResponse) o;
    return Objects.equals(this.links, getSolicitationActionResponse.links) &&
        Objects.equals(this.embedded, getSolicitationActionResponse.embedded) &&
        Objects.equals(this.payload, getSolicitationActionResponse.payload) &&
        Objects.equals(this.errors, getSolicitationActionResponse.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, embedded, payload, errors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSolicitationActionResponse {\n");

    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

