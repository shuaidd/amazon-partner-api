/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.shuaidd.aspi.model.product.price;

import com.google.gson.annotations.SerializedName;


import java.util.Objects;

/**
 * CompetitivePriceType
 */
public class CompetitivePriceType {
  @SerializedName("CompetitivePriceId")
  private String competitivePriceId = null;

  @SerializedName("Price")
  private PriceType price = null;

  @SerializedName("condition")
  private String condition = null;

  @SerializedName("subcondition")
  private String subcondition = null;

  @SerializedName("belongsToRequester")
  private Boolean belongsToRequester = null;

  public CompetitivePriceType competitivePriceId(String competitivePriceId) {
    this.competitivePriceId = competitivePriceId;
    return this;
  }

   /**
   * The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.
   * @return competitivePriceId
  **/

  public String getCompetitivePriceId() {
    return competitivePriceId;
  }

  public void setCompetitivePriceId(String competitivePriceId) {
    this.competitivePriceId = competitivePriceId;
  }

  public CompetitivePriceType price(PriceType price) {
    this.price = price;
    return this;
  }

   /**
   * Pricing information for a given CompetitivePriceId value.
   * @return price
  **/

  public PriceType getPrice() {
    return price;
  }

  public void setPrice(PriceType price) {
    this.price = price;
  }

  public CompetitivePriceType condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.
   * @return condition
  **/

  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public CompetitivePriceType subcondition(String subcondition) {
    this.subcondition = subcondition;
    return this;
  }

   /**
   * Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
   * @return subcondition
  **/

  public String getSubcondition() {
    return subcondition;
  }

  public void setSubcondition(String subcondition) {
    this.subcondition = subcondition;
  }

  public CompetitivePriceType belongsToRequester(Boolean belongsToRequester) {
    this.belongsToRequester = belongsToRequester;
    return this;
  }

   /**
   *  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.
   * @return belongsToRequester
  **/

  public Boolean isBelongsToRequester() {
    return belongsToRequester;
  }

  public void setBelongsToRequester(Boolean belongsToRequester) {
    this.belongsToRequester = belongsToRequester;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompetitivePriceType competitivePriceType = (CompetitivePriceType) o;
    return Objects.equals(this.competitivePriceId, competitivePriceType.competitivePriceId) &&
        Objects.equals(this.price, competitivePriceType.price) &&
        Objects.equals(this.condition, competitivePriceType.condition) &&
        Objects.equals(this.subcondition, competitivePriceType.subcondition) &&
        Objects.equals(this.belongsToRequester, competitivePriceType.belongsToRequester);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competitivePriceId, price, condition, subcondition, belongsToRequester);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompetitivePriceType {\n");

    sb.append("    competitivePriceId: ").append(toIndentedString(competitivePriceId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    subcondition: ").append(toIndentedString(subcondition)).append("\n");
    sb.append("    belongsToRequester: ").append(toIndentedString(belongsToRequester)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

