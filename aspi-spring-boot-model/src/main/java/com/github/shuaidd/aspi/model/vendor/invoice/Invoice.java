/*
 * Selling Partner API for Retail Procurement Payments
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.shuaidd.aspi.model.vendor.invoice;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Invoice
 */
public class Invoice {
  /**
   * Identifies the type of invoice.
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    INVOICE("Invoice"),

    CREDITNOTE("CreditNote");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String text) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("invoiceType")
  private InvoiceTypeEnum invoiceType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("referenceNumber")
  private String referenceNumber = null;

  @SerializedName("date")
  private String date = null;

  @SerializedName("remitToParty")
  private PartyIdentification remitToParty = null;

  @SerializedName("shipToParty")
  private PartyIdentification shipToParty = null;

  @SerializedName("shipFromParty")
  private PartyIdentification shipFromParty = null;

  @SerializedName("billToParty")
  private PartyIdentification billToParty = null;

  @SerializedName("paymentTerms")
  private PaymentTerms paymentTerms = null;

  @SerializedName("invoiceTotal")
  private Money invoiceTotal = null;

  @SerializedName("taxDetails")
  private List<TaxDetails> taxDetails = null;

  @SerializedName("additionalDetails")
  private List<AdditionalDetails> additionalDetails = null;

  @SerializedName("chargeDetails")
  private List<ChargeDetails> chargeDetails = null;

  @SerializedName("allowanceDetails")
  private List<AllowanceDetails> allowanceDetails = null;

  @SerializedName("items")
  private List<InvoiceItem> items = null;

  public Invoice invoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

   /**
   * Identifies the type of invoice.
   * @return invoiceType
  **/

  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }

  public Invoice id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
   * @return id
  **/

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Invoice referenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

   /**
   * An additional unique reference number used for regulatory or other purposes.
   * @return referenceNumber
  **/

  public String getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }

  public Invoice date(String date) {
    this.date = date;
    return this;
  }

   /**
   * Date when the invoice/credit note information was generated in the origin&#39;s accounting system. The invoice date should be on or after the purchase order creation date.
   * @return date
  **/

  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public Invoice remitToParty(PartyIdentification remitToParty) {
    this.remitToParty = remitToParty;
    return this;
  }

   /**
   * Name, address and tax details of the party receiving the payment of this invoice.
   * @return remitToParty
  **/

  public PartyIdentification getRemitToParty() {
    return remitToParty;
  }

  public void setRemitToParty(PartyIdentification remitToParty) {
    this.remitToParty = remitToParty;
  }

  public Invoice shipToParty(PartyIdentification shipToParty) {
    this.shipToParty = shipToParty;
    return this;
  }

   /**
   * Name, address and tax details of the party receiving a shipment of products.
   * @return shipToParty
  **/

  public PartyIdentification getShipToParty() {
    return shipToParty;
  }

  public void setShipToParty(PartyIdentification shipToParty) {
    this.shipToParty = shipToParty;
  }

  public Invoice shipFromParty(PartyIdentification shipFromParty) {
    this.shipFromParty = shipFromParty;
    return this;
  }

   /**
   * Name, address and tax details of the party sending a shipment of products.
   * @return shipFromParty
  **/

  public PartyIdentification getShipFromParty() {
    return shipFromParty;
  }

  public void setShipFromParty(PartyIdentification shipFromParty) {
    this.shipFromParty = shipFromParty;
  }

  public Invoice billToParty(PartyIdentification billToParty) {
    this.billToParty = billToParty;
    return this;
  }

   /**
   * Name, address and tax details of the party to whom this invoice is issued.
   * @return billToParty
  **/

  public PartyIdentification getBillToParty() {
    return billToParty;
  }

  public void setBillToParty(PartyIdentification billToParty) {
    this.billToParty = billToParty;
  }

  public Invoice paymentTerms(PaymentTerms paymentTerms) {
    this.paymentTerms = paymentTerms;
    return this;
  }

   /**
   * The payment terms for the invoice.
   * @return paymentTerms
  **/

  public PaymentTerms getPaymentTerms() {
    return paymentTerms;
  }

  public void setPaymentTerms(PaymentTerms paymentTerms) {
    this.paymentTerms = paymentTerms;
  }

  public Invoice invoiceTotal(Money invoiceTotal) {
    this.invoiceTotal = invoiceTotal;
    return this;
  }

   /**
   * Total monetary amount charged in the invoice or full value of credit note to be paid including all relevant taxes. It is the total amount of invoice (including charges, less allowances) before terms discount (if discount is applicable).
   * @return invoiceTotal
  **/

  public Money getInvoiceTotal() {
    return invoiceTotal;
  }

  public void setInvoiceTotal(Money invoiceTotal) {
    this.invoiceTotal = invoiceTotal;
  }

  public Invoice taxDetails(List<TaxDetails> taxDetails) {
    this.taxDetails = taxDetails;
    return this;
  }

  public Invoice addTaxDetailsItem(TaxDetails taxDetailsItem) {
    if (this.taxDetails == null) {
      this.taxDetails = new ArrayList<TaxDetails>();
    }
    this.taxDetails.add(taxDetailsItem);
    return this;
  }

   /**
   * Total tax amount details for all line items.
   * @return taxDetails
  **/

  public List<TaxDetails> getTaxDetails() {
    return taxDetails;
  }

  public void setTaxDetails(List<TaxDetails> taxDetails) {
    this.taxDetails = taxDetails;
  }

  public Invoice additionalDetails(List<AdditionalDetails> additionalDetails) {
    this.additionalDetails = additionalDetails;
    return this;
  }

  public Invoice addAdditionalDetailsItem(AdditionalDetails additionalDetailsItem) {
    if (this.additionalDetails == null) {
      this.additionalDetails = new ArrayList<AdditionalDetails>();
    }
    this.additionalDetails.add(additionalDetailsItem);
    return this;
  }

   /**
   * Additional details provided by the selling party, for tax related or other purposes.
   * @return additionalDetails
  **/

  public List<AdditionalDetails> getAdditionalDetails() {
    return additionalDetails;
  }

  public void setAdditionalDetails(List<AdditionalDetails> additionalDetails) {
    this.additionalDetails = additionalDetails;
  }

  public Invoice chargeDetails(List<ChargeDetails> chargeDetails) {
    this.chargeDetails = chargeDetails;
    return this;
  }

  public Invoice addChargeDetailsItem(ChargeDetails chargeDetailsItem) {
    if (this.chargeDetails == null) {
      this.chargeDetails = new ArrayList<ChargeDetails>();
    }
    this.chargeDetails.add(chargeDetailsItem);
    return this;
  }

   /**
   * Total charge amount details for all line items.
   * @return chargeDetails
  **/

  public List<ChargeDetails> getChargeDetails() {
    return chargeDetails;
  }

  public void setChargeDetails(List<ChargeDetails> chargeDetails) {
    this.chargeDetails = chargeDetails;
  }

  public Invoice allowanceDetails(List<AllowanceDetails> allowanceDetails) {
    this.allowanceDetails = allowanceDetails;
    return this;
  }

  public Invoice addAllowanceDetailsItem(AllowanceDetails allowanceDetailsItem) {
    if (this.allowanceDetails == null) {
      this.allowanceDetails = new ArrayList<AllowanceDetails>();
    }
    this.allowanceDetails.add(allowanceDetailsItem);
    return this;
  }

   /**
   * Total allowance amount details for all line items.
   * @return allowanceDetails
  **/

  public List<AllowanceDetails> getAllowanceDetails() {
    return allowanceDetails;
  }

  public void setAllowanceDetails(List<AllowanceDetails> allowanceDetails) {
    this.allowanceDetails = allowanceDetails;
  }

  public Invoice items(List<InvoiceItem> items) {
    this.items = items;
    return this;
  }

  public Invoice addItemsItem(InvoiceItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<InvoiceItem>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * The list of invoice items.
   * @return items
  **/

  public List<InvoiceItem> getItems() {
    return items;
  }

  public void setItems(List<InvoiceItem> items) {
    this.items = items;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.invoiceType, invoice.invoiceType) &&
        Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.referenceNumber, invoice.referenceNumber) &&
        Objects.equals(this.date, invoice.date) &&
        Objects.equals(this.remitToParty, invoice.remitToParty) &&
        Objects.equals(this.shipToParty, invoice.shipToParty) &&
        Objects.equals(this.shipFromParty, invoice.shipFromParty) &&
        Objects.equals(this.billToParty, invoice.billToParty) &&
        Objects.equals(this.paymentTerms, invoice.paymentTerms) &&
        Objects.equals(this.invoiceTotal, invoice.invoiceTotal) &&
        Objects.equals(this.taxDetails, invoice.taxDetails) &&
        Objects.equals(this.additionalDetails, invoice.additionalDetails) &&
        Objects.equals(this.chargeDetails, invoice.chargeDetails) &&
        Objects.equals(this.allowanceDetails, invoice.allowanceDetails) &&
        Objects.equals(this.items, invoice.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceType, id, referenceNumber, date, remitToParty, shipToParty, shipFromParty, billToParty, paymentTerms, invoiceTotal, taxDetails, additionalDetails, chargeDetails, allowanceDetails, items);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");

    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    remitToParty: ").append(toIndentedString(remitToParty)).append("\n");
    sb.append("    shipToParty: ").append(toIndentedString(shipToParty)).append("\n");
    sb.append("    shipFromParty: ").append(toIndentedString(shipFromParty)).append("\n");
    sb.append("    billToParty: ").append(toIndentedString(billToParty)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    invoiceTotal: ").append(toIndentedString(invoiceTotal)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("    additionalDetails: ").append(toIndentedString(additionalDetails)).append("\n");
    sb.append("    chargeDetails: ").append(toIndentedString(chargeDetails)).append("\n");
    sb.append("    allowanceDetails: ").append(toIndentedString(allowanceDetails)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

