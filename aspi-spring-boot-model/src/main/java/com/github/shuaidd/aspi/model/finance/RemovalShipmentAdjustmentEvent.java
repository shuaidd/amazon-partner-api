/*
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.shuaidd.aspi.model.finance;

import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
 */

public class RemovalShipmentAdjustmentEvent {
  @SerializedName("PostedDate")
  private String postedDate = null;

  @SerializedName("AdjustmentEventId")
  private String adjustmentEventId = null;

  @SerializedName("MerchantOrderId")
  private String merchantOrderId = null;

  @SerializedName("OrderId")
  private String orderId = null;

  @SerializedName("TransactionType")
  private String transactionType = null;

  @SerializedName("RemovalShipmentItemAdjustmentList")
  private List<RemovalShipmentItemAdjustment> removalShipmentItemAdjustmentList = null;

  public RemovalShipmentAdjustmentEvent postedDate(String postedDate) {
    this.postedDate = postedDate;
    return this;
  }

   /**
   * The date when the financial event was posted.
   * @return postedDate
  **/

  public String getPostedDate() {
    return postedDate;
  }

  public void setPostedDate(String postedDate) {
    this.postedDate = postedDate;
  }

  public RemovalShipmentAdjustmentEvent adjustmentEventId(String adjustmentEventId) {
    this.adjustmentEventId = adjustmentEventId;
    return this;
  }

   /**
   * The unique identifier for the adjustment event.
   * @return adjustmentEventId
  **/

  public String getAdjustmentEventId() {
    return adjustmentEventId;
  }

  public void setAdjustmentEventId(String adjustmentEventId) {
    this.adjustmentEventId = adjustmentEventId;
  }

  public RemovalShipmentAdjustmentEvent merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

   /**
   * The merchant removal orderId.
   * @return merchantOrderId
  **/

  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }

  public RemovalShipmentAdjustmentEvent orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * The orderId for shipping inventory.
   * @return orderId
  **/

  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public RemovalShipmentAdjustmentEvent transactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION.
   * @return transactionType
  **/

  public String getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  public RemovalShipmentAdjustmentEvent removalShipmentItemAdjustmentList(List<RemovalShipmentItemAdjustment> removalShipmentItemAdjustmentList) {
    this.removalShipmentItemAdjustmentList = removalShipmentItemAdjustmentList;
    return this;
  }

  public RemovalShipmentAdjustmentEvent addRemovalShipmentItemAdjustmentListItem(RemovalShipmentItemAdjustment removalShipmentItemAdjustmentListItem) {
    if (this.removalShipmentItemAdjustmentList == null) {
      this.removalShipmentItemAdjustmentList = new ArrayList<RemovalShipmentItemAdjustment>();
    }
    this.removalShipmentItemAdjustmentList.add(removalShipmentItemAdjustmentListItem);
    return this;
  }

   /**
   * A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.
   * @return removalShipmentItemAdjustmentList
  **/

  public List<RemovalShipmentItemAdjustment> getRemovalShipmentItemAdjustmentList() {
    return removalShipmentItemAdjustmentList;
  }

  public void setRemovalShipmentItemAdjustmentList(List<RemovalShipmentItemAdjustment> removalShipmentItemAdjustmentList) {
    this.removalShipmentItemAdjustmentList = removalShipmentItemAdjustmentList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemovalShipmentAdjustmentEvent removalShipmentAdjustmentEvent = (RemovalShipmentAdjustmentEvent) o;
    return Objects.equals(this.postedDate, removalShipmentAdjustmentEvent.postedDate) &&
        Objects.equals(this.adjustmentEventId, removalShipmentAdjustmentEvent.adjustmentEventId) &&
        Objects.equals(this.merchantOrderId, removalShipmentAdjustmentEvent.merchantOrderId) &&
        Objects.equals(this.orderId, removalShipmentAdjustmentEvent.orderId) &&
        Objects.equals(this.transactionType, removalShipmentAdjustmentEvent.transactionType) &&
        Objects.equals(this.removalShipmentItemAdjustmentList, removalShipmentAdjustmentEvent.removalShipmentItemAdjustmentList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postedDate, adjustmentEventId, merchantOrderId, orderId, transactionType, removalShipmentItemAdjustmentList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemovalShipmentAdjustmentEvent {\n");

    sb.append("    postedDate: ").append(toIndentedString(postedDate)).append("\n");
    sb.append("    adjustmentEventId: ").append(toIndentedString(adjustmentEventId)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    removalShipmentItemAdjustmentList: ").append(toIndentedString(removalShipmentItemAdjustmentList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

